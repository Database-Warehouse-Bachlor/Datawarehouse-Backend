// <auto-generated />
using System;
using Datawarehouse_Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Datawarehouse_Backend.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    partial class WarehouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Datawarehouse_Backend.Models.AbsenceRegister", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("duration")
                        .HasColumnType("double precision");

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("toDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("AbsenceRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.AccountsReceivable", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.ToTable("AccountsReceivables");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.BalanceAndBudget", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantId");

                    b.ToTable("BalanceAndBudgets");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Customer", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("employeeName")
                        .HasColumnType("text");

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.ErrorLog", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("errorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("errorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("timeOfError")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceInbound", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantId");

                    b.ToTable("InvoiceInbounds");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceOutbound", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("invoiceDue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("orderId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("orderId")
                        .IsUnique();

                    b.ToTable("InvoiceOutbounds");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Order", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("customerId")
                        .HasColumnType("bigint");

                    b.Property<long>("invoiceOutboundId")
                        .HasColumnType("bigint");

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("customerId");

                    b.HasIndex("tennantId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Tennant", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("apiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("businessId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tennantName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Tennants");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.TimeRegister", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("recordDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("employeeId");

                    b.ToTable("TimeRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("tennantId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.AbsenceRegister", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Employee", "employee")
                        .WithMany("absenceRegisters")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.AccountsReceivable", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Customer", "customer")
                        .WithMany("accountsreceivables")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.BalanceAndBudget", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("bnb")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Customer", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("customers")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("employees")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceInbound", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("invoicesInbound")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceOutbound", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Customer", "customer")
                        .WithMany("invoicesOutbound")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datawarehouse_Backend.Models.Order", "order")
                        .WithOne("invoiceOutbound")
                        .HasForeignKey("Datawarehouse_Backend.Models.InvoiceOutbound", "orderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("order");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Order", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Customer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("orders")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.TimeRegister", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Employee", "employee")
                        .WithMany("timeRegisters")
                        .HasForeignKey("employeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.User", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("users")
                        .HasForeignKey("tennantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Customer", b =>
                {
                    b.Navigation("accountsreceivables");

                    b.Navigation("invoicesOutbound");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.Navigation("absenceRegisters");

                    b.Navigation("timeRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Order", b =>
                {
                    b.Navigation("invoiceOutbound");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Tennant", b =>
                {
                    b.Navigation("bnb");

                    b.Navigation("customers");

                    b.Navigation("employees");

                    b.Navigation("invoicesInbound");

                    b.Navigation("orders");

                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
