// <auto-generated />
using System;
using Datawarehouse_Backend.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Datawarehouse_Backend.Migrations
{
    [DbContext(typeof(WarehouseContext))]
    [Migration("20210430082209_ModelUpdate")]
    partial class ModelUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Datawarehouse_Backend.Models.AbsenceRegister", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("abcenseType")
                        .HasColumnType("text");

                    b.Property<string>("abcenseTypeText")
                        .HasColumnType("text");

                    b.Property<long>("absenceRegisterId")
                        .HasColumnType("bigint");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<string>("degreeDisability")
                        .HasColumnType("text");

                    b.Property<double>("duration")
                        .HasColumnType("double precision");

                    b.Property<long>("employeeFK")
                        .HasColumnType("bigint");

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("fromDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("soleCaretaker")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("toDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("employeeFK");

                    b.ToTable("AbsenceRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Account", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("MVAcode")
                        .HasColumnType("bigint");

                    b.Property<long>("SAFTcode")
                        .HasColumnType("bigint");

                    b.Property<long>("accountId")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<long>("financialYearFK")
                        .HasColumnType("bigint");

                    b.Property<long>("financialYearid")
                        .HasColumnType("bigint");

                    b.Property<int>("number")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("financialYearFK");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.BalanceAndBudget", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("BalanceAndBudgetId")
                        .HasColumnType("bigint");

                    b.Property<string>("account")
                        .HasColumnType("text");

                    b.Property<string>("department")
                        .HasColumnType("text");

                    b.Property<decimal>("endBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<decimal>("periodBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("periodDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("startBalance")
                        .HasColumnType("numeric");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantFK");

                    b.ToTable("BalanceAndBudgets");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Client", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<string>("clientName")
                        .HasColumnType("text");

                    b.Property<bool>("customer")
                        .HasColumnType("boolean");

                    b.Property<bool>("isInactive")
                        .HasColumnType("boolean");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.Property<string>("zipcode")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("tennantFK");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("employeeName")
                        .HasColumnType("text");

                    b.Property<int>("employmentRate")
                        .HasColumnType("integer");

                    b.Property<string>("employmentType")
                        .HasColumnType("text");

                    b.Property<string>("gender")
                        .HasColumnType("text");

                    b.Property<bool>("isCaseworker")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("leaveDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("posistionCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ssbPayType")
                        .HasColumnType("text");

                    b.Property<string>("ssbPositionCode")
                        .HasColumnType("text");

                    b.Property<string>("ssbPositionText")
                        .HasColumnType("text");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<string>("statusText")
                        .HasColumnType("text");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantFK");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.ErrorLog", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("errorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("errorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("timeOfError")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.FinancialYear", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("customerAccount")
                        .HasColumnType("integer");

                    b.Property<long>("financialYearId")
                        .HasColumnType("bigint");

                    b.Property<int>("supplierAccount")
                        .HasColumnType("integer");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("tennantFK");

                    b.ToTable("FinancialYears");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Invoice", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("amountTotal")
                        .HasColumnType("numeric");

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("invoiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("invoiceId")
                        .HasColumnType("bigint");

                    b.Property<string>("invoicePdf")
                        .HasColumnType("text");

                    b.Property<long>("orderId")
                        .HasColumnType("bigint");

                    b.Property<string>("specification")
                        .HasColumnType("text");

                    b.Property<long>("voucherFK")
                        .HasColumnType("bigint");

                    b.Property<long>("voucherId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("voucherFK")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceLine", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("amountTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<decimal>("discount")
                        .HasColumnType("numeric");

                    b.Property<long>("invoiceFK")
                        .HasColumnType("bigint");

                    b.Property<long>("invoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("invoiceLineId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<string>("productName")
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<string>("unit")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("invoiceFK");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Order", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("caseHandler")
                        .HasColumnType("text");

                    b.Property<long>("clientFK")
                        .HasColumnType("bigint");

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("confimedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("customerName")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<DateTime>("endDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("fixedPriceAmount")
                        .HasColumnType("double precision");

                    b.Property<bool>("hasWarranty")
                        .HasColumnType("boolean");

                    b.Property<double>("hoursOfWork")
                        .HasColumnType("double precision");

                    b.Property<bool>("isFixedPrice")
                        .HasColumnType("boolean");

                    b.Property<long>("jobId")
                        .HasColumnType("bigint");

                    b.Property<string>("jobName")
                        .HasColumnType("text");

                    b.Property<long>("jobSiteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("lastChanged")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("materials")
                        .HasColumnType("text");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("orderId")
                        .HasColumnType("bigint");

                    b.Property<string>("orderType")
                        .HasColumnType("text");

                    b.Property<DateTime>("plannedDelivery")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("startedDelivery")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("warrantyDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.HasIndex("clientFK");

                    b.HasIndex("tennantFK");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Post", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("MVAcode")
                        .HasColumnType("bigint");

                    b.Property<long>("accountFK")
                        .HasColumnType("bigint");

                    b.Property<long>("accountId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<long>("postId")
                        .HasColumnType("bigint");

                    b.Property<long>("voucherFK")
                        .HasColumnType("bigint");

                    b.Property<long>("voucherId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("accountFK");

                    b.HasIndex("voucherFK");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Tennant", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("apiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("businessId")
                        .HasColumnType("text");

                    b.Property<string>("tennantName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Tennants");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.TimeRegister", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("account")
                        .HasColumnType("text");

                    b.Property<decimal>("amount")
                        .HasColumnType("numeric");

                    b.Property<long>("employeeFK")
                        .HasColumnType("bigint");

                    b.Property<long>("employeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("invoiceRate")
                        .HasColumnType("text");

                    b.Property<bool>("isCaseworker")
                        .HasColumnType("boolean");

                    b.Property<long>("orderId")
                        .HasColumnType("bigint");

                    b.Property<string>("payType")
                        .HasColumnType("text");

                    b.Property<string>("payTypeName")
                        .HasColumnType("text");

                    b.Property<string>("personDepartment")
                        .HasColumnType("text");

                    b.Property<string>("personDepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("personName")
                        .HasColumnType("text");

                    b.Property<string>("processingCode")
                        .HasColumnType("text");

                    b.Property<int>("qty")
                        .HasColumnType("integer");

                    b.Property<double>("rate")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("recordDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("recordDepartment")
                        .HasColumnType("text");

                    b.Property<string>("recordDepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("recordType")
                        .HasColumnType("text");

                    b.Property<string>("recordTypeName")
                        .HasColumnType("text");

                    b.Property<string>("summaryType")
                        .HasColumnType("text");

                    b.Property<long>("timeRegisterId")
                        .HasColumnType("bigint");

                    b.Property<string>("viaType")
                        .HasColumnType("text");

                    b.Property<string>("workComment")
                        .HasColumnType("text");

                    b.Property<string>("workplace")
                        .HasColumnType("text");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("employeeFK");

                    b.ToTable("TimeRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.Property<long>("tennantFK")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("tennantFK");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Voucher", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<long>("clientFK")
                        .HasColumnType("bigint");

                    b.Property<long>("clientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<long>("number")
                        .HasColumnType("bigint");

                    b.Property<long>("voucherId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("clientFK");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.AbsenceRegister", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Employee", "employee")
                        .WithMany("absenceRegisters")
                        .HasForeignKey("employeeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Account", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.FinancialYear", "financialYear")
                        .WithMany("accounts")
                        .HasForeignKey("financialYearFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("financialYear");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.BalanceAndBudget", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("bnb")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Client", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("clients")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("employees")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.FinancialYear", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("financialYears")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Invoice", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Voucher", "voucher")
                        .WithOne("invoice")
                        .HasForeignKey("Datawarehouse_Backend.Models.Invoice", "voucherFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("voucher");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.InvoiceLine", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Invoice", "invoice")
                        .WithMany("invoiceLines")
                        .HasForeignKey("invoiceFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("invoice");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Order", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Client", "client")
                        .WithMany("orders")
                        .HasForeignKey("clientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("orders")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Post", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Account", "account")
                        .WithMany("posts")
                        .HasForeignKey("accountFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Datawarehouse_Backend.Models.Voucher", "voucher")
                        .WithMany("posts")
                        .HasForeignKey("voucherFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");

                    b.Navigation("voucher");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.TimeRegister", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Employee", "employee")
                        .WithMany("timeRegisters")
                        .HasForeignKey("employeeFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("employee");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.User", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Tennant", "tennant")
                        .WithMany("users")
                        .HasForeignKey("tennantFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tennant");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Voucher", b =>
                {
                    b.HasOne("Datawarehouse_Backend.Models.Client", "client")
                        .WithMany("vouchers")
                        .HasForeignKey("clientFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("client");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Account", b =>
                {
                    b.Navigation("posts");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Client", b =>
                {
                    b.Navigation("orders");

                    b.Navigation("vouchers");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Employee", b =>
                {
                    b.Navigation("absenceRegisters");

                    b.Navigation("timeRegisters");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.FinancialYear", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Invoice", b =>
                {
                    b.Navigation("invoiceLines");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Tennant", b =>
                {
                    b.Navigation("bnb");

                    b.Navigation("clients");

                    b.Navigation("employees");

                    b.Navigation("financialYears");

                    b.Navigation("orders");

                    b.Navigation("users");
                });

            modelBuilder.Entity("Datawarehouse_Backend.Models.Voucher", b =>
                {
                    b.Navigation("invoice");

                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
